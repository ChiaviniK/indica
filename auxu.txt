document.addEventListener('DOMContentLoaded', () => {
    // COPIE E COLE O CONTEÚDO COMPLETO DOS SEUS ARQUIVOS JSON AQUI
    const fazendasData = [{"id_fazenda":1,"nome_fazenda":"Sá Santos - EI","estado":"SP","hectares":1176,"responsavel":"Nathan Barros","data_cadastro":"2023-05-15"},
    {"id_fazenda":2,"nome_fazenda":"da Rocha e Filhos","estado":"SP","hectares":910,"responsavel":"Dr. João Pedro Casa Grande","data_cadastro":"2024-03-04"},
    {"id_fazenda":3,"nome_fazenda":"Novaes","estado":"MT","hectares":1344,"responsavel":"Giovanna Dias","data_cadastro":"2025-07-18"},
    {"id_fazenda":4,"nome_fazenda":"Moraes","estado":"MG","hectares":1180,"responsavel":"Dante Correia","data_cadastro":"2022-10-30"},
    {"id_fazenda":5,"nome_fazenda":"Pereira e Filhos","estado":"MG","hectares":1145,"responsavel":"Letícia Pastor","data_cadastro":"2023-08-16"},
    {"id_fazenda":6,"nome_fazenda":"Aragão Monteiro - ME","estado":"MG","hectares":1094,"responsavel":"Vinícius Andrade","data_cadastro":"2023-02-12"},
    {"id_fazenda":7,"nome_fazenda":"Pacheco","estado":"SP","hectares":171,"responsavel":"Vitor Pacheco","data_cadastro":"2025-06-30"},
    {"id_fazenda":8,"nome_fazenda":"Cardoso","estado":"RS","hectares":516,"responsavel":"Anna Liz Viana","data_cadastro":"2023-11-04"},
    {"id_fazenda":9,"nome_fazenda":"Silva","estado":"SP","hectares":1288,"responsavel":"Manuela Moraes","data_cadastro":"2024-12-24"},
    {"id_fazenda":10,"nome_fazenda":"Martins","estado":"RS","hectares":380,"responsavel":"Diogo Caldeira","data_cadastro":"2024-11-07"}];
    const colheitasData = [{"id_fazenda":1,"cultura":"Cana-de-Açúcar","safra":"2022/23","hectares_colhidos":200.31,"quantidade_toneladas":291.13},
    {"id_fazenda":2,"cultura":"Café","safra":"2022/23","hectares_colhidos":171.63,"quantidade_toneladas":475.33},
    {"id_fazenda":3,"cultura":"Milho","safra":"2023/24","hectares_colhidos":253.46,"quantidade_toneladas":89.85},
    {"id_fazenda":4,"cultura":"Café","safra":"2023/24","hectares_colhidos":288.75,"quantidade_toneladas":165.61},
    {"id_fazenda":5,"cultura":"Café","safra":"2022/23","hectares_colhidos":235.94,"quantidade_toneladas":71.25},
    {"id_fazenda":5,"cultura":"Milho","safra":"2022/23","hectares_colhidos":231.11,"quantidade_toneladas":313.75},
    {"id_fazenda":5,"cultura":"Café","safra":"2022/23","hectares_colhidos":182.94,"quantidade_toneladas":130.84},
    {"id_fazenda":6,"cultura":"Café","safra":"2022/23","hectares_colhidos":209.56,"quantidade_toneladas":248.77},
    {"id_fazenda":7,"cultura":"Algodão","safra":"2023/24","hectares_colhidos":216.49,"quantidade_toneladas":199.5},
    {"id_fazenda":7,"cultura":"Cana-de-Açúcar","safra":"2023/24","hectares_colhidos":147.42,"quantidade_toneladas":98.62},
    {"id_fazenda":7,"cultura":"Milho","safra":"2022/23","hectares_colhidos":128.49,"quantidade_toneladas":485.03},
    {"id_fazenda":8,"cultura":"Cana-de-Açúcar","safra":"2022/23","hectares_colhidos":225.29,"quantidade_toneladas":494.36},
    {"id_fazenda":8,"cultura":"Milho","safra":"2022/23","hectares_colhidos":61.35,"quantidade_toneladas":157.06},
    {"id_fazenda":9,"cultura":"Soja","safra":"2023/24","hectares_colhidos":278.43,"quantidade_toneladas":398.81},
    {"id_fazenda":10,"cultura":"Soja","safra":"2022/23","hectares_colhidos":237.93,"quantidade_toneladas":434.96}];
    const custosData = [{"id_fazenda":1,"data":"2024-08-22","categoria":"Mão de Obra","valor":16582.31},
    {"id_fazenda":1,"data":"2025-06-12","categoria":"Irrigação","valor":1929.46},
    {"id_fazenda":1,"data":"2025-07-21","categoria":"Irrigação","valor":2046.21},
    {"id_fazenda":1,"data":"2024-11-24","categoria":"Colheita","valor":1697.7},
    {"id_fazenda":1,"data":"2024-12-17","categoria":"Insumos","valor":13672.93},
    {"id_fazenda":1,"data":"2024-11-13","categoria":"Mão de Obra","valor":6670.39},
    {"id_fazenda":1,"data":"2024-11-06","categoria":"Insumos","valor":1931.6},
    {"id_fazenda":1,"data":"2025-07-07","categoria":"Equipamentos","valor":19880.97},
    {"id_fazenda":2,"data":"2025-01-09","categoria":"Transporte","valor":6403.23},
    {"id_fazenda":2,"data":"2024-12-06","categoria":"Transporte","valor":14138.76},
    {"id_fazenda":2,"data":"2025-04-10","categoria":"Mão de Obra","valor":11873.37},
    {"id_fazenda":2,"data":"2025-07-20","categoria":"Mão de Obra","valor":4370.97},
    {"id_fazenda":3,"data":"2025-04-23","categoria":"Transporte","valor":12000.36},
    {"id_fazenda":3,"data":"2024-12-01","categoria":"Insumos","valor":2769.4},
    {"id_fazenda":3,"data":"2025-02-06","categoria":"Irrigação","valor":1181.82},
    {"id_fazenda":3,"data":"2025-03-01","categoria":"Insumos","valor":2009.2}];
    const climaData = [{"id_fazenda":1,"data":"2025-07-01 22:30:06.006477","temperatura_media":34.5,"precipitacao_mm":26.5,"vento_kmh":10.4},
    {"id_fazenda":1,"data":"2025-07-02 22:30:06.006477","temperatura_media":24.4,"precipitacao_mm":16.4,"vento_kmh":2.9},
    {"id_fazenda":1,"data":"2025-07-03 22:30:06.006477","temperatura_media":26.2,"precipitacao_mm":25.9,"vento_kmh":13.4},
    {"id_fazenda":1,"data":"2025-07-04 22:30:06.006477","temperatura_media":29.7,"precipitacao_mm":4.9,"vento_kmh":2.4},
    {"id_fazenda":1,"data":"2025-07-05 22:30:06.006477","temperatura_media":32.4,"precipitacao_mm":8.8,"vento_kmh":7.1},
    {"id_fazenda":1,"data":"2025-07-06 22:30:06.006477","temperatura_media":34.2,"precipitacao_mm":2.2,"vento_kmh":4.2},
    {"id_fazenda":1,"data":"2025-07-07 22:30:06.006477","temperatura_media":24.4,"precipitacao_mm":22.0,"vento_kmh":11.4},
    {"id_fazenda":1,"data":"2025-07-08 22:30:06.006477","temperatura_media":33.3,"precipitacao_mm":2.8,"vento_kmh":12.3},
    {"id_fazenda":1,"data":"2025-07-09 22:30:06.006477","temperatura_media":26.1,"precipitacao_mm":15.0,"vento_kmh":18.0},
    {"id_fazenda":1,"data":"2025-07-10 22:30:06.006477","temperatura_media":29.3,"precipitacao_mm":17.1,"vento_kmh":14.4}];
    const sensoresData = [{"id_sensor":1,"id_fazenda":1,"tipo_sensor":"Nitrogênio","modelo":"MOD-765","ativo":false,"data_instalacao":"2024-01-18"},
    {"id_sensor":2,"id_fazenda":1,"tipo_sensor":"Temperatura","modelo":"MOD-559","ativo":true,"data_instalacao":"2024-02-16"},
    {"id_sensor":3,"id_fazenda":1,"tipo_sensor":"Umidade do Solo","modelo":"MOD-877","ativo":true,"data_instalacao":"2025-03-19"},
    {"id_sensor":4,"id_fazenda":1,"tipo_sensor":"Nitrogênio","modelo":"MOD-532","ativo":true,"data_instalacao":"2023-10-22"},
    {"id_sensor":5,"id_fazenda":2,"tipo_sensor":"Temperatura","modelo":"MOD-320","ativo":true,"data_instalacao":"2025-03-01"},
    {"id_sensor":6,"id_fazenda":2,"tipo_sensor":"Umidade do Solo","modelo":"MOD-194","ativo":false,"data_instalacao":"2024-06-15"},
    {"id_sensor":7,"id_fazenda":2,"tipo_sensor":"Umidade do Solo","modelo":"MOD-467","ativo":true,"data_instalacao":"2024-07-08"},
    {"id_fazenda":8,"id_sensor":25,"tipo_sensor":"Umidade do Solo","modelo":"MOD-852","ativo":true,"data_instalacao":"2025-05-18"}
    ];
    const leiturasSensoresData = [{"id_sensor":1,"data_hora":"2025-07-01 22:30:05.982651","valor":65.77},
    {"id_sensor":1,"data_hora":"2025-07-02 22:30:05.982651","valor":26.17},
    {"id_sensor":1,"data_hora":"2025-07-03 22:30:05.982651","valor":15.79},
    {"id_sensor":1,"data_hora":"2025-07-04 22:30:05.982651","valor":85.13},
    {"id_sensor":1,"data_hora":"2025-07-05 22:30:05.982651","valor":27.16},
    {"id_sensor":1,"data_hora":"2025-07-06 22:30:05.982651","valor":58.51},
    {"id_sensor":1,"data_hora":"2025-07-07 22:30:05.982651","valor":60.74},
    {"id_sensor":1,"data_hora":"2025-07-08 22:30:05.982651","valor":42.73},
    {"id_sensor":1,"data_hora":"2025-07-09 22:30:05.982651","valor":57.53},
    {"id_sensor":1,"data_hora":"2025-07-10 22:30:05.982651","valor":52.05}];
    const visitasData = [{"id_fazenda":1,"data_visita":"2025-07-29","tecnico":"Cecília Cunha","motivo":"Recomendação nutricional","recomendacao":"Necessitatibus ab ullam fuga assumenda pariatur et fuga quasi."},
    {"id_fazenda":1,"data_visita":"2025-07-29","tecnico":"Bruna Montenegro","motivo":"Verificação de pragas","recomendacao":"A delectus quasi nesciunt corporis."},
    {"id_fazenda":1,"data_visita":"2025-07-29","tecnico":"Léo Araújo","motivo":"Recomendação nutricional","recomendacao":"Laborum quam cupiditate voluptatem ratione."},
    {"id_fazenda":1,"data_visita":"2025-07-29","tecnico":"Thomas Moura","motivo":"Verificação de pragas","recomendacao":"Optio modi vero rem quis."},
    {"id_fazenda":2,"data_visita":"2025-07-29","tecnico":"José Moreira","motivo":"Análise de solo","recomendacao":"At ducimus autem iusto illum asperiores incidunt eveniet."},
    {"id_fazenda":2,"data_visita":"2025-07-29","tecnico":"Yan Rios","motivo":"Recomendação nutricional","recomendacao":"Nobis perferendis repudiandae iure nobis delectus nemo maiores aliquid."},
    {"id_fazenda":2,"data_visita":"2025-07-29","tecnico":"Mirella Gonçalves","motivo":"Recomendação nutricional","recomendacao":"Impedit accusamus eaque dolor enim debitis."},
    {"id_fazenda":3,"data_visita":"2025-07-29","tecnico":"Sr. Eduardo Sampaio","motivo":"Análise de solo","recomendacao":"Deserunt esse molestiae distinctio sapiente perspiciatis tenetur dignissimos."},
    {"id_fazenda":3,"data_visita":"2025-07-29","tecnico":"Aylla Oliveira","motivo":"Verificação de pragas","recomendacao":"Doloribus repellat adipisci harum inventore impedit expedita ad."},
    {"id_fazenda":3,"data_visita":"2025-07-29","tecnico":"Maitê Peixoto","motivo":"Análise de solo","recomendacao":"Voluptatibus aperiam exercitationem eius in ullam ullam nemo at."}];

    const dashboardDisplay = document.getElementById('dashboard-display');
    const dashboardCardsAgro = document.querySelectorAll('#dashboards-agro .card');
    const showDataBtn = document.getElementById('showDataBtn');
    const dataOverlay = document.getElementById('dataOverlay');
    const closeOverlayBtn = document.getElementById('closeOverlayBtn');

    let chartInstances = {};

    const destroyChart = (chartId) => {
        if (chartInstances[chartId]) {
            chartInstances[chartId].destroy();
            delete chartInstances[chartId];
        }
    };

    const allAgroData = {
        'Fazendas': fazendasData,
        'Colheitas': colheitasData,
        'Custos': custosData,
        'Clima': climaData,
        'Sensores': sensoresData,
        'Leituras': leiturasSensoresData,
        'Visitas': visitasData
    };
    
    if (dashboardCardsAgro.length > 0) {
        dashboardCardsAgro.forEach(card => {
            card.addEventListener('click', () => {
                dashboardCardsAgro.forEach(c => c.classList.remove('active-card'));
                card.classList.add('active-card');
                
                const dashboardType = card.dataset.dashboard;
                renderAgroDashboard(dashboardType);
            });
        });
    }

    showDataBtn.addEventListener('click', () => {
        setupDataExplorer(allAgroData);
    });

    closeOverlayBtn.addEventListener('click', () => {
        dataOverlay.style.display = 'none';
    });
    
    function setupDataExplorer(datasets) {
        dataOverlay.style.display = 'flex';
        const dataTabsContainer = document.getElementById('dataTabs');
        dataTabsContainer.innerHTML = '';
        
        const dataNames = Object.keys(datasets);
        dataNames.forEach(name => {
            const button = document.createElement('button');
            button.textContent = name;
            button.addEventListener('click', () => {
                dataTabsContainer.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                renderDataTable(`Dados Brutos - ${name}`, datasets[name]);
            });
            dataTabsContainer.appendChild(button);
        });

        if (dataNames.length > 0) {
            dataTabsContainer.querySelector('button').click();
        }
    }

    function renderDataTable(title, data) {
        const overlayTitle = document.getElementById('overlayTitle');
        const tableContainer = document.getElementById('dataTableContainer');

        overlayTitle.textContent = title;
        
        if (!data || data.length === 0) {
            tableContainer.innerHTML = '<p>Nenhum dado encontrado.</p>';
            return;
        }

        const headers = Object.keys(data[0]);
        let tableHtml = `
            <table class="data-table">
                <thead>
                    <tr>
                        ${headers.map(h => `<th>${h}<br><input type="text" class="filter-input" data-column="${h}" placeholder="Filtrar"></th>`).join('')}
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        `;
        tableContainer.innerHTML = tableHtml;

        const tbody = tableContainer.querySelector('tbody');

        function renderTableRows(filteredData) {
            tbody.innerHTML = filteredData.map(row => `
                <tr>
                    ${headers.map(h => `<td>${row[h]}</td>`).join('')}
                </tr>
            `).join('');
        }

        renderTableRows(data);

        const filterInputs = tableContainer.querySelectorAll('.filter-input');
        filterInputs.forEach(input => {
            input.addEventListener('input', () => {
                let filteredData = [...data];
                filterInputs.forEach(filterInput => {
                    const column = filterInput.dataset.column;
                    const value = filterInput.value.toLowerCase();
                    if (value) {
                        filteredData = filteredData.filter(row => 
                            String(row[column]).toLowerCase().includes(value)
                        );
                    }
                });
                renderTableRows(filteredData);
            });
        });
    }


    function renderAgroDashboard(type) {
        dashboardDisplay.innerHTML = `
            <div class="loading-overlay">
                <div class="spinner"></div>
            </div>
        `;
        showDataBtn.classList.add('visible');
        
        for (const chartId in chartInstances) {
            destroyChart(chartId);
        }

        setTimeout(() => {
            let content = '';
            
            switch (type) {
                case 'produtividade-agricola':
                    const fazendasOptionsHtml = fazendasData.map(f => `<option value="${f.id_fazenda}">${f.nome_fazenda}</option>`).join('');
                    const fazendasOptionsProdutividade = `
                        <select id="fazendaFilterProdutividade" style="width: 200px; margin: 10px auto;">
                            <option value="geral">Geral</option>
                            ${fazendasOptionsHtml}
                        </select>
                    `;
                    content = `
                        <div class="dashboard-content">
                            <h2>Dashboard de Produtividade Agrícola</h2>
                            
                            <h3 style="margin-top:20px;">Filtro por Fazenda</h3>
                            ${fazendasOptionsProdutividade}

                            <div class="kpis" style="display:flex; justify-content:space-around; text-align:center;">
                                <div id="kpi-producao-total" style="background-color:#f0f0f0; padding:20px; border-radius:8px;">
                                    <strong>Produção Total:</strong><br> -
                                </div>
                                <div id="kpi-hectares" style="background-color:#f0f0f0; padding:20px; border-radius:8px;">
                                    <strong>Hectares Colhidos:</strong><br> -
                                </div>
                                <div id="kpi-produtividade" style="background-color:#f0f0f0; padding:20px; border-radius:8px;">
                                    <strong>Produtividade Média:</strong><br> -
                                </div>
                            </div>

                            <h3 style="margin-top:20px;">Produção por Cultura</h3>
                            <div class="chart-container">
                                <canvas id="producaoCulturaChart"></canvas>
                            </div>
                            
                            <h3 style="margin-top:20px;">Produtividade por Fazenda</h3>
                            <div class="chart-container">
                                <canvas id="produtividadeFazendaChart"></canvas>
                            </div>
                        </div>
                    `;
                    dashboardDisplay.innerHTML = content;

                    const fazendaFilterProdutividade = document.getElementById('fazendaFilterProdutividade');
                    fazendaFilterProdutividade.addEventListener('change', (event) => {
                        renderProdutividade(event.target.value);
                    });

                    renderProdutividade('geral');

                    function renderProdutividade(fazendaId) {
                        let dadosFiltrados = colheitasData;
                        if (fazendaId !== 'geral') {
                            dadosFiltrados = colheitasData.filter(c => c.id_fazenda === parseInt(fazendaId));
                        }
                        
                        const producaoPorCultura = dadosFiltrados.reduce((acc, row) => {
                            acc[row.cultura] = (acc[row.cultura] || 0) + (row.quantidade_toneladas || 0);
                            return acc;
                        }, {});

                        const totalProducao = dadosFiltrados.reduce((sum, row) => sum + (row.quantidade_toneladas || 0), 0);
                        const totalHectares = dadosFiltrados.reduce((sum, row) => sum + (row.hectares_colhidos || 0), 0);
                        const produtividadeMedia = (totalProducao / totalHectares).toFixed(2);
                        
                        document.getElementById('kpi-producao-total').innerHTML = `<strong>Produção Total:</strong><br> ${totalProducao.toFixed(2)} toneladas`;
                        document.getElementById('kpi-hectares').innerHTML = `<strong>Hectares Colhidos:</strong><br> ${totalHectares.toFixed(2)}`;
                        document.getElementById('kpi-produtividade').innerHTML = `<strong>Produtividade Média:</strong><br> ${produtividadeMedia} ton/ha`;

                        destroyChart('producaoCulturaChart');
                        const ctxProducaoCultura = document.getElementById('producaoCulturaChart').getContext('2d');
                        chartInstances.producaoCulturaChart = new Chart(ctxProducaoCultura, {
                            type: 'bar',
                            data: {
                                labels: Object.keys(producaoPorCultura),
                                datasets: [{
                                    label: 'Produção Total (ton)',
                                    data: Object.values(producaoPorCultura),
                                    backgroundColor: '#28a745',
                                }]
                            },
                            options: { responsive: true, scales: { y: { beginAtZero: true } } },
                        });

                        const produtividadePorFazenda = fazendasData.reduce((acc, fazenda) => {
                            const colheitasDaFazenda = colheitasData.filter(c => c.id_fazenda === fazenda.id_fazenda);
                            if (colheitasDaFazenda.length > 0) {
                                const producao = colheitasDaFazenda.reduce((sum, c) => sum + c.quantidade_toneladas, 0);
                                const hectares = colheitasDaFazenda.reduce((sum, c) => sum + c.hectares_colhidos, 0);
                                acc[fazenda.nome_fazenda] = (producao / hectares).toFixed(2);
                            }
                            return acc;
                        }, {});

                        destroyChart('produtividadeFazendaChart');
                        const ctxProdutividadeFazenda = document.getElementById('produtividadeFazendaChart').getContext('2d');
                        chartInstances.produtividadeFazendaChart = new Chart(ctxProdutividadeFazenda, {
                            type: 'bar',
                            data: {
                                labels: Object.keys(produtividadePorFazenda),
                                datasets: [{
                                    label: 'Produtividade (ton/ha)',
                                    data: Object.values(produtividadePorFazenda),
                                    backgroundColor: '#007bff',
                                }]
                            },
                            options: { responsive: true, scales: { y: { beginAtZero: true } } },
                        });
                    }
                    break;
                case 'monitoramento-sensores':
                    const totalSensores = sensoresData.length;
                    const sensoresAtivos = sensoresData.filter(s => s.ativo).length;
                    const percentualAtivos = ((sensoresAtivos / totalSensores) * 100).toFixed(2);
                    
                    const fazendasOptionsSensores = fazendasData.map(f => `<option value="${f.id_fazenda}">${f.nome_fazenda}</option>`).join('');
                    const tiposSensoresOptions = [...new Set(sensoresData.map(s => s.tipo_sensor))].map(t => `<option value="${t}">${t}</option>`).join('');

                    content = `
                        <div class="dashboard-content">
                            <h2>Dashboard de Monitoramento de Sensores</h2>
                            <div class="kpis" style="display:flex; justify-content:space-around; text-align:center;">
                                <div style="background-color:#f0f0f0; padding:20px; border-radius:8px;">
                                    <strong>Sensores Ativos:</strong><br> ${percentualAtivos}%
                                </div>
                                <div style="background-color:#f0f0f0; padding:20px; border-radius:8px;">
                                    <strong>Sensores Totais:</strong><br> ${totalSensores}
                                </div>
                            </div>

                            <h3 style="margin-top:20px;">Filtros</h3>
                            <div style="display: flex; gap: 20px; flex-wrap: wrap; justify-content: center;">
                                <select id="fazendaFilter" style="width: 200px;">
                                    <option value="geral">Geral</option>
                                    ${fazendasOptionsHtml}
                                </select>
                                <select id="tipoSensorFilter" style="width: 200px;">
                                    <option value="geral">Todos os Tipos</option>
                                    ${tiposSensoresOptionsHtml}
                                </select>
                            </div>

                            <div id="sensoresChartContainer" class="flex-container">
                                <div class="chart-box">
                                    <h4 style="text-align: center;">Distribuição de Sensores</h4>
                                    <canvas id="sensoresPieChart"></canvas>
                                </div>
                                <div class="line-chart-box">
                                    <h4 style="text-align: center;">Leituras ao Longo do Tempo</h4>
                                    <canvas id="sensoresLineChart"></canvas>
                                </div>
                            </div>
                        </div>
                    `;
                    dashboardDisplay.innerHTML = content;
                    
                    const fazendaFilterSensores = document.getElementById('fazendaFilter');
                    const tipoSensorFilter = document.getElementById('tipoSensorFilter');
                    
                    const updateSensoresCharts = () => {
                        renderSensoresPieChart(fazendaFilterSensores.value);
                        renderSensoresLineChart(fazendaFilterSensores.value, tipoSensorFilter.value);
                    };

                    fazendaFilterSensores.addEventListener('change', updateSensoresCharts);
                    tipoSensorFilter.addEventListener('change', updateSensoresCharts);
                    
                    updateSensoresCharts();

                    function renderSensoresPieChart(fazendaId) {
                        destroyChart('sensoresPieChart');
                        const ctx = document.getElementById('sensoresPieChart').getContext('2d');

                        let filteredSensores = sensoresData;
                        if (fazendaId !== 'geral') {
                            filteredSensores = filteredSensores.filter(s => s.id_fazenda === parseInt(fazendaId));
                        }
                        
                        const tipoSensores = filteredSensores.reduce((acc, row) => {
                            acc[row.tipo_sensor] = (acc[row.tipo_sensor] || 0) + 1;
                            return acc;
                        }, {});

                        chartInstances.sensoresPieChart = new Chart(ctx, {
                            type: 'pie',
                            data: {
                                labels: Object.keys(tipoSensores),
                                datasets: [{
                                    data: Object.values(tipoSensores),
                                    backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#17a2b8', '#6c757d'],
                                }]
                            },
                            options: { 
                                responsive: true,
                                plugins: {
                                    legend: { position: 'top' },
                                    tooltip: { callbacks: { label: function(context) {
                                        let label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        const total = filteredSensores.length;
                                        label += context.parsed + ' (' + ((context.parsed / total) * 100).toFixed(2) + '%)';
                                        return label;
                                    }}}
                                }
                            }
                        });
                    }

                    function renderSensoresLineChart(fazendaId, tipoSensor) {
                        destroyChart('sensoresLineChart');
                        const ctx = document.getElementById('sensoresLineChart').getContext('2d');
                        
                        let labels = [];
                        let data = [];
                        
                        if (fazendaId !== 'geral' && tipoSensor !== 'geral') {
                            const sensoresDaFazendaDoTipo = sensoresData.filter(s => s.id_fazenda === parseInt(fazendaId) && s.tipo_sensor === tipoSensor);
                            const leiturasDoTipo = leiturasSensoresData.filter(l => sensoresDaFazendaDoTipo.some(s => s.id_sensor === l.id_sensor));
                            
                            const leiturasPorData = leiturasDoTipo.reduce((acc, row) => {
                                const data = row.data_hora.substring(0, 10);
                                acc[data] = (acc[data] || 0) + (row.valor || 0);
                                return acc;
                            }, {});

                            labels = Object.keys(leiturasPorData).sort();
                            data = labels.map(key => leiturasPorData[key]);
                        }

                        chartInstances.sensoresLineChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: `Leituras de ${tipoSensor}`,
                                    data: data,
                                    borderColor: '#007bff',
                                    tension: 0.4,
                                }]
                            },
                            options: {
                                responsive: true,
                                scales: {
                                    y: { beginAtZero: true }
                                }
                            }
                        });
                    }
                    break;
                case 'analise-custos':
                    const custoTotal = custosData.reduce((sum, row) => sum + (row.valor || 0), 0).toFixed(2);
                    
                    const fazendasOptionsCustos = fazendasData.map(f => `<option value="${f.id_fazenda}">${f.nome_fazenda}</option>`).join('');
                    const categoriasOptions = [...new Set(custosData.map(c => c.categoria))].map(c => `<option value="${c}">${c}</option>`).join('');

                    content = `
                        <div class="dashboard-content">
                            <h2>Dashboard de Análise de Custos</h2>
                            <div class="kpis" style="display:flex; justify-content:space-around; text-align:center;">
                                <div style="background-color:#f0f0f0; padding:20px; border-radius:8px;">
                                    <strong>Custo Total:</strong><br> R$ ${custoTotal}
                                </div>
                            </div>

                            <h3 style="margin-top:20px;">Filtros</h3>
                            <div style="display: flex; gap: 20px; flex-wrap: wrap; justify-content: center;">
                                <select id="fazendaFilterCustos" style="width: 200px;">
                                    <option value="geral">Geral</option>
                                    ${fazendasOptionsHtml}
                                </select>
                                <select id="categoriaFilter" style="width: 200px;">
                                    <option value="geral">Todas as Categorias</option>
                                    ${categoriasOptionsHtml}
                                </select>
                            </div>
                            
                            <div id="custosChartContainer" class="flex-container">
                                <div class="chart-box">
                                    <h4 style="text-align: center;">Distribuição de Custos</h4>
                                    <canvas id="custosPieChart"></canvas>
                                </div>
                                <div class="line-chart-box">
                                    <h4 style="text-align: center;">Custo ao Longo do Tempo</h4>
                                    <canvas id="custosLineChart"></canvas>
                                </div>
                            </div>
                        </div>
                    `;
                    dashboardDisplay.innerHTML = content;
                    
                    const fazendaFilterCustos = document.getElementById('fazendaFilterCustos');
                    const categoriaFilter = document.getElementById('categoriaFilter');
                    
                    const updateCustosCharts = () => {
                        renderCustosPieChart(fazendaFilterCustos.value);
                        renderCustosLineChart(fazendaFilterCustos.value, categoriaFilter.value);
                    };

                    fazendaFilterCustos.addEventListener('change', updateCustosCharts);
                    categoriaFilter.addEventListener('change', updateCustosCharts);
                    
                    updateCustosCharts();

                    function renderCustosPieChart(fazendaId) {
                        destroyChart('custosPieChart');
                        const ctx = document.getElementById('custosPieChart').getContext('2d');

                        let filteredCustos = custosData;
                        if (fazendaId !== 'geral') {
                            filteredCustos = filteredCustos.filter(c => c.id_fazenda === parseInt(fazendaId));
                        }

                        const custoPorCategoria = filteredCustos.reduce((acc, row) => {
                            acc[row.categoria] = (acc[row.categoria] || 0) + (row.valor || 0);
                            return acc;
                        }, {});

                        chartInstances.custosPieChart = new Chart(ctx, {
                            type: 'pie',
                            data: {
                                labels: Object.keys(custoPorCategoria),
                                datasets: [{
                                    data: Object.values(custoPorCategoria),
                                    backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#17a2b8', '#6c757d'],
                                }]
                            },
                            options: { 
                                responsive: true,
                                plugins: {
                                    legend: { position: 'top' },
                                    tooltip: { callbacks: { label: function(context) {
                                        let label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        const total = Object.values(custoPorCategoria).reduce((a, b) => a + b, 0);
                                        label += 'R$ ' + context.parsed.toFixed(2).replace('.', ',') + ' (' + ((context.parsed / total) * 100).toFixed(2) + '%)';
                                        return label;
                                    }}}
                                }
                            }
                        });
                    }

                    function renderCustosLineChart(fazendaId, categoria) {
                        destroyChart('custosLineChart');
                        const ctx = document.getElementById('custosLineChart').getContext('2d');
                        
                        let labels = [];
                        let data = [];
                        
                        if (fazendaId !== 'geral' && categoria !== 'geral') {
                            const custosDaFazenda = custosData.filter(c => c.id_fazenda === parseInt(fazendaId) && c.categoria === categoria);
                            
                            const custosPorData = custosDaFazenda.reduce((acc, row) => {
                                const data = row.data;
                                acc[data] = (acc[data] || 0) + (row.valor || 0);
                                return acc;
                            }, {});

                            labels = Object.keys(custosPorData).sort();
                            data = labels.map(key => custosPorData[key]);
                        }

                        chartInstances.custosLineChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: `Custo de ${categoria}`,
                                    data: data,
                                    borderColor: '#dc3545',
                                    tension: 0.4,
                                }]
                            },
                            options: {
                                responsive: true,
                                scales: {
                                    y: { beginAtZero: true }
                                }
                            }
                        });
                    }
                    break;
                default:
                    dashboardDisplay.innerHTML = `<p>Dashboard não encontrado.</p>`;
            }
        }, 500);
    }
});